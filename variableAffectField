1)变量提升   //因为这个怪异特性，所以建议在函数内部顶端定义该函数所有要用到变量
JavaScript函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量”提升“到函数顶部：
'use strict';
function foo() {
    var x = 'Hello, ' + y;
    alert(x);
    var y = 'Bob';
} 
foo();   // hello，undefined
//虽然是strict模式，但语句var x = 'Hello, ' + y;并不报错，原因是变量y在稍后申明了。但是alert显示Hello, undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。

2）全局作用域
不在任何函数内定义的变量就具有全局作用域，实际上，JavaScript默认有一个全局对象window，全局作用域变量实际上是被绑定到window的一个属性：
'use strict';
var course = 'Learn JavaScript';
alert(course); // 'Learn JavaScript'
alert(window.course); // 'Learn JavaScript'
因此，直接访问全局变量course和访问window.course是完全一样的。
也因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：
‘use strict’;
function foo(){
alert('foo');
}
foo();
window.foo();//完全等价于直接调用foo();

3)名字空间
全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，就会造成命名冲突，且很难发现。  减少冲突的一个方法就是： 把自己的所有变量和函数全部绑定到一个全局变量中， eg。
var MYAPP={};    //唯一全局变量MYAPP
MYAPP.name='myapp';
MYAPP.version=1.0;     //其他变量
MYAPP.foo = function(){..};    //其他函数

4）let
//由于变量提示及JavaScript的变量作用域实际上是函数内部，所以我们在for循环等语句块中是无法定义具有局部作用的变量，为了解决这个问题，ES6中引入了“let”， 用let代替var可以申明一个块级作用域的变量：
function foo() {
    var sum = 0;
        for (let i=0; i<100; i++) {   //i的作用域仅在for循环内部
	        sum += i;
		    }
		        i += 1; // SyntaxError
}

5）常量
ES6之前，定义一个变量，且不改变其值当成常量；
ES6标准引入了关键字const，const与let都具有块级作用域：
const PI=3.14;
PI;   //3.14
